<%- include('../partials/header.ejs') %>
<style>
  .spinner-static {
    color: #ccc;
  }
  .spinner-running {
    color: #007bff;
    animation: spin 1s linear infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>
<div class="content-wrapper">
  <div class="content-header">
    <div class="container-fluid">
      <div class="row mb-2">
        <div class="col-sm-6">
          <h1 class="m-0 text-dark">Consultar Filas de Mensagens</h1>
        </div>
        <div class="col-sm-6">
          <ol class="breadcrumb float-sm-right">
            <li class="breadcrumb-item"><a href="#">Home</a></li>
            <li class="breadcrumb-item active">Listagem de Filas de Mensagens</li>
          </ol>
        </div>
      </div>
    </div>
  </div>
  <section class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-12">
          <div class="card">
            <div class="card-header">
              <button id="btnProcess" class="btn btn-primary">Processar Selecionados</button>
              <button id="btnStop" class="btn btn-warning">Parar Processamento</button>
              <button id="btnDelete" class="btn btn-danger">Deletar Selecionados</button>
            </div>
            <div class="card-body">
              <div id="myGrid" style="height: 100%;" class="ag-theme-alpine"></div>
              <div id="rowData" style="display: none;" data-rows='<%- JSON.stringify(data.map(mensagem => ({
                fila: mensagem.fila,
                apoiador: mensagem.apoiador,
                whatsapp_apoiador: mensagem.whatsapp,
                empresa: mensagem.empresa,
                mensage: mensagem.mensage,
                time: mensagem.time,
                qtda_contatos: mensagem.qtda_contatos,
                qtda_msgs: mensagem.qtda_msgs
              }))) %>'></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>
<%- include('../partials/footer.ejs') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.4.0/socket.io.js"></script>
<script>
  const socket = io('http://0.0.0.0:3800/', {
    transports: ['websocket'],
  });

  document.addEventListener('DOMContentLoaded', () => {
    const rowDataElement = document.getElementById('rowData');
    const rowData = JSON.parse(rowDataElement.getAttribute('data-rows'));

    var columnDefs = [
      {
        headerName: 'Apoiador',
        field: 'apoiador',
        flex: 1,
        checkboxSelection: true,
        headerCheckboxSelection: true,
      },
      { headerName: 'WhatsApp Apoiador', field: 'whatsapp_apoiador', flex: 1 },
      { headerName: 'Empresa', field: 'empresa', flex: 1 },
      { headerName: 'Mensagem', field: 'mensage', flex: 3 },
      {
        headerName: 'Timer',
        field: 'time',
        flex: 1,
        valueFormatter: function (params) {
          return params.value ? `${params.value / 1000}s` : '';
        },
      },
      { headerName: 'QTDA Contatos', field: 'qtda_contatos', flex: 1 },
      {
        headerName: 'QTDA Processadas',
        field: 'qtda_msgs',
        flex: 1,
        cellRenderer: (params) => {
          const [processed, , total] = params.value.split(' ');
          return `
            <span>${processed} de ${total}</span>
            <i class="fas fa-sync-alt spinner-static"></i>
          `;
        },
      },
    ];

    var gridOptions = {
      columnDefs: columnDefs,
      rowSelection: 'multiple',
      domLayout: 'autoHeight',
      suppressRowClickSelection: true,
      pagination: true,
      paginationPageSize: 10,
      paginationPageSizeSelector: [10, 25, 50, 100, 200, 500],
      defaultColDef: {
        resizable: true,
        sortable: true,
        filter: 'agTextColumnFilter',
        floatingFilter: true,
        enableCellChangeFlash: true,
      },
      rowData: rowData,
    };

    const gridApi = agGrid.createGrid(
      document.getElementById('myGrid'),
      gridOptions
    );
    gridApi.setGridOption('rowData', rowData);

    socket.on('messageProcessed', (data) => {
      const rowIndex = rowData.findIndex((row) => row.fila === data.queue);
      if (rowIndex !== -1) {
        rowData[rowIndex].qtda_msgs = `${data.statics.total_ack} de ${data.statics.total_publish}`;
        const rowNode = gridApi.getRowNode(rowIndex);
        if (rowNode) {
          rowNode.setData(rowData[rowIndex]);
          const cell = gridApi.getCellRendererInstances({
            rowNodes: [gridApi.getRowNode(rowIndex)],
          })[0];
          if (cell) {
            cell.eGui.querySelector('i').classList.add('spinner-running');
            cell.eGui.querySelector('i').classList.remove('spinner-static');
          }
        }
      }
    });

    socket.on('startProcessing', (data) => {
      const rowIndex = rowData.findIndex((row) => row.fila === data.queue);
      if (rowIndex !== -1) {
        const cell = gridApi.getCellRendererInstances({
          rowNodes: [gridApi.getRowNode(rowIndex)],
        })[0];
        if (cell) {
          cell.eGui.querySelector('i').classList.add('spinner-running');
          cell.eGui.querySelector('i').classList.remove('spinner-static');
        }
      }
    });

    socket.on('stopProcessing', (data) => {
      const rowIndex = rowData.findIndex((row) => row.fila === data.queue);
      if (rowIndex !== -1) {
        const cell = gridApi.getCellRendererInstances({
          rowNodes: [gridApi.getRowNode(rowIndex)],
        })[0];
        if (cell) {
          cell.eGui.querySelector('i').classList.remove('spinner-running');
          cell.eGui.querySelector('i').classList.add('spinner-static');
        }
      }
    });

    document.getElementById('btnProcess').addEventListener('click', () => {
      var selectedNodes = gridApi.getSelectedNodes();
      var selectedData = selectedNodes.map((node) => node.data);
      if (selectedData.length > 0) {
        $.ajax({
          type: 'post',
          contentType: 'application/json',
          data: JSON.stringify({ selectedData }),
          url: '/disparos/processQueue',
          dataType: 'json',
          success: function (res) {
            Swal.fire({
              title: 'Processamento Iniciado',
              text: 'As mensagens estão sendo processadas na fila.',
              icon: 'success',
              confirmButtonText: 'OK',
            });

            selectedData.forEach((data) => {
              socket.emit('startProcessing', { queue: data.fila });
            });
          },
          error: function (res) {
            Swal.fire({
              title: 'Erro',
              text: 'Ocorreu um erro ao iniciar o processamento da fila.',
              icon: 'error',
              confirmButtonText: 'OK',
            });
          },
        });
      } else {
        Swal.fire({
          title: 'Nenhuma Fila Selecionada',
          text: 'Por favor, selecione pelo menos uma fila para ser processada.',
          icon: 'warning',
          confirmButtonText: 'OK',
        });
      }
    });

    document.getElementById('btnStop').addEventListener('click', () => {
      var selectedNodes = gridApi.getSelectedNodes();
      var selectedData = selectedNodes.map((node) => node.data);
      if (selectedData.length > 0) {
        selectedData.forEach((data) => {
          $.ajax({
            type: 'post',
            contentType: 'application/json',
            data: JSON.stringify({ queue: data.fila }),
            url: '/disparos/stopQueue',
            dataType: 'json',
            success: function (res) {
              Swal.fire({
                title: 'Processamento Parado',
                text: 'O processamento da fila foi parado com sucesso.',
                icon: 'success',
                confirmButtonText: 'OK',
              });
              socket.emit('stopProcessing', { queue: data.fila });
            },
            error: function (res) {
              Swal.fire({
                title: 'Erro',
                text: 'Ocorreu um erro ao parar o processamento da fila.',
                icon: 'error',
                confirmButtonText: 'OK',
              });
            },
          });
        });
      } else {
        Swal.fire({
          title: 'Nenhuma Fila Selecionada',
          text: 'Por favor, selecione pelo menos uma fila para ser parada.',
          icon: 'warning',
          confirmButtonText: 'OK',
        });
      }
    });

    document.getElementById('btnDelete').addEventListener('click', () => {
      var selectedNodes = gridApi.getSelectedNodes();
      var selectedData = selectedNodes.map((node) => node.data);
      if (selectedData.length > 0) {
        Swal.fire({
          title: 'Confirmação',
          text: 'Você tem certeza que deseja deletar as filas selecionadas? Esta ação não pode ser desfeita.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Sim, deletar!',
          cancelButtonText: 'Não, cancelar',
        }).then((result) => {
          if (result.isConfirmed) {
            $.ajax({
              type: 'post',
              contentType: 'application/json',
              data: JSON.stringify({ selectedData }),
              url: '/disparos/deleteQueue',
              dataType: 'json',
              success: function (res) {
                Swal.fire('Deletado!', 'As filas foram deletadas com sucesso.', 'success');
                selectedData.forEach((data) => {
                  const rowIndex = rowData.findIndex((row) => row.fila === data.fila);
                  if (rowIndex !== -1) {
                    rowData.splice(rowIndex, 1);
                    gridApi.applyTransaction({ remove: [rowData[rowIndex]] });
                  }
                });
              },
              error: function (res) {
                Swal.fire('Erro', 'Ocorreu um erro ao deletar as filas.', 'error');
              },
            });
          }
        });
      } else {
        Swal.fire({
          title: 'Nenhuma Fila Selecionada',
          text: 'Por favor, selecione pelo menos uma fila para ser deletada.',
          icon: 'warning',
          confirmButtonText: 'OK',
        });
      }
    });
  });
</script>
